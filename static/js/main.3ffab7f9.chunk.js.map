{"version":3,"sources":["media/BeepSound.wav","components/Controls/Controls.js","components/Display/Display.js","components/Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","faPlus","faMinus","Controls","props","decrementId","incrementId","labelId","valueId","label","value","click","react_default","a","createElement","className","id","onClick","e","react_fontawesome_index_es","icon","Display","mode","seconds","mins","Math","floor","remainingSecs","Button","type","toggleTimer","onReset","children","faPlay","faPause","defaultBreak","defaultSession","App","state","breakLength","sessionLength","sessionSeconds","breakSeconds","play","_this","setState","sessionTimer","prevState","breakTimer","changeLengthValues","resetHandler","clearInterval","breakInterval","audio","currentTime","pause","prevProps","this","sessionInterval","setInterval","_this2","src","AudioSrc","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ffab7f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BeepSound.988833bf.wav\";","import React from 'react';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faPlus, faMinus);\r\n\r\nexport default function (props) {\r\n  const {label, value, click} = props;\r\n\r\n  let decrementId;\r\n  let incrementId;\r\n  let labelId;\r\n  let valueId;\r\n  if(label === 'break') {\r\n    decrementId = 'break-decrement';\r\n    incrementId = 'break-increment';\r\n    labelId = 'break-label';\r\n    valueId = 'break-length';\r\n  } \r\n  if(label === 'session') {\r\n      decrementId = 'session-decrement';\r\n      incrementId = 'session-increment';\r\n      labelId = 'session-label';\r\n      valueId = 'session-length';\r\n  }\r\n\r\n  return (\r\n    <div className=\"Controls\">\r\n      <p id={labelId}>{label} length</p>\r\n      <button \r\n        id={decrementId}\r\n        onClick={(e) => click(e, decrementId)}\r\n        >\r\n        <FontAwesomeIcon icon=\"minus\" />\r\n      </button>\r\n      <span id={valueId}>{value}</span>\r\n      <button \r\n        id={incrementId}\r\n        onClick={(e) => click(e, incrementId)}\r\n        >\r\n        <FontAwesomeIcon icon=\"plus\" />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Display(props) {\r\n  const {mode, seconds} = props;\r\n\r\n  const mins = Math.floor(seconds / 60);\r\n  const remainingSecs = Math.floor(seconds % 60);\r\n\r\n  return (\r\n    <div className=\"Display\">\r\n      <p id=\"timer-label\">{mode}</p>\r\n      <div id=\"time-left\">\r\n      {mins < 10 ? '0' + mins : mins}:{remainingSecs < 10 ? '0' + remainingSecs : remainingSecs}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Button(props) {\r\n    const { type, toggleTimer, onReset } = props;\r\n\r\n  return (\r\n    <button \r\n        id={type} \r\n        className={type}\r\n        onClick={type === 'start_stop' ? toggleTimer : onReset}>{props.children}</button>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport Controls from './components/Controls/Controls';\nimport Display from './components/Display/Display';\nimport Button from './components/Button/Button';\nimport AudioSrc from './media/BeepSound.wav';\nimport './App.css';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\nimport { faPause } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faPlay, faPause);\n\n\nconst defaultBreak = 5;\nconst defaultSession = 25;\nclass App extends Component {\n\n  state = {\n    breakLength: defaultBreak,\n    sessionLength: defaultSession,\n    sessionSeconds: defaultSession * 60,\n    breakSeconds: defaultBreak * 60,\n    mode: 'session',\n    play: false\n  }\n\n  toggleTimer = () => {\n    this.setState({\n      play: !this.state.play\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.play !== this.state.play && this.state.play) {\n      this.sessionInterval = setInterval(this.sessionTimer, 1000)\n    }\n    if(prevState.play !== this.state.play && !this.state.play) {\n      clearInterval(this.sessionInterval);\n    }\n    \n    if(prevState.sessionLength !== this.state.sessionLength) {\n      /*Every time i click on controls to change the values of session, change the respective seconds to display the correct time on Display*/\n      this.setState({\n        sessionSeconds: this.state.sessionLength * 60\n      })\n    }\n\n    if(prevState.breakLength !== this.state.breakLength) {\n      /*Every time i click on controls to change the values of break, change the respective seconds to display the correct break on Display*/\n      this.setState({\n        breakSeconds: this.state.breakLength * 60\n      })\n    }\n\n    if(prevState.sessionSeconds !== this.state.sessionSeconds && this.state.sessionSeconds === 0) {\n      this.audio.play();\n    }\n\n    if(prevState.sessionSeconds !== this.state.sessionSeconds && this.state.sessionSeconds < 0) {\n      clearInterval(this.sessionInterval);\n        this.setState({\n          mode: 'break',\n          sessionSeconds: this.state.sessionLength * 60\n        });\n      this.breakInterval = setInterval(this.breakTimer, 1000);\n    }\n\n    if(prevState.breakSeconds !== this.state.breakSeconds && this.state.breakSeconds < 0) {\n      clearInterval(this.breakInterval);\n      this.setState({\n        mode: 'session',\n        breakSeconds: this.state.breakLength * 60\n      });\n      this.sessionInterval = setInterval(this.sessionTimer, 1000);\n    }\n    \n  }\n\n  sessionTimer = () => {\n    this.setState(prevState => ({\n      sessionSeconds: prevState.sessionSeconds - 1\n    }));\n  }\n\n  breakTimer = () => {\n    this.setState(prevState => ({\n      breakSeconds: prevState.breakSeconds - 1\n    }));\n  }\n  \n  changeLengthValues = (e, id) => {\n    if(this.state.play) {\n      return;\n    }\n    switch(id) {\n      case 'break-decrement':\n       if(this.state.breakLength > 1) {\n        this.setState(prevState => ({\n          breakLength: prevState.breakLength - 1\n        }));\n       }\n      break;\n\n      case 'break-increment':\n       if(this.state.breakLength < 60) {\n        this.setState(prevState => ({\n          breakLength: prevState.breakLength + 1\n        }));\n       }\n      break;\n\n      case 'session-decrement':\n       if(this.state.sessionLength > 1) {\n        this.setState(prevState => ({\n          sessionLength: prevState.sessionLength - 1\n        }));\n       }\n      break;\n\n      case 'session-increment':\n       if(this.state.sessionLength < 60) {\n        this.setState(prevState => ({\n          sessionLength: prevState.sessionLength + 1\n        }));\n       }\n      break;\n    }\n  }\n\n  resetHandler = () => {\n    clearInterval(this.breakInterval);\n    this.audio.currentTime = 0;\n    this.audio.pause();\n    this.setState({\n      breakLength: defaultBreak,\n      sessionLength: defaultSession,\n      sessionSeconds: defaultSession * 60,\n      breakSeconds: defaultBreak * 60,\n      mode: 'session',\n      play: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n       <h1 className=\"app-title\">Pomodoro Clock</h1>\n       <div className=\"Controls-Wrapper\">\n        <Controls click={this.changeLengthValues} label=\"break\" value={this.state.breakLength}/>\n        <Controls click={this.changeLengthValues} label=\"session\" value={this.state.sessionLength}/>\n       </div>\n       <Display \n          mode={this.state.mode} \n          seconds={this.state.mode === 'session' ? this.state.sessionSeconds : this.state.breakSeconds}/>\n       <Button type=\"start_stop\" toggleTimer={this.toggleTimer}><FontAwesomeIcon icon={this.state.play ? 'pause' : 'play'} /></Button>\n       <Button type=\"reset\" onReset={this.resetHandler}>RESET</Button>\n\n       <audio id=\"beep\" src={AudioSrc} ref={(audio) => this.audio = audio}></audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}